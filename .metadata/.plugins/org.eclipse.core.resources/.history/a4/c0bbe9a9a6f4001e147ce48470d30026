//package org.example;
//import org.apache.http.HttpHost;
//import org.elasticsearch.action.bulk.BulkRequest;
//import org.elasticsearch.action.bulk.BulkResponse;
//import org.elasticsearch.action.index.IndexRequest;
//import org.elasticsearch.client.RequestOptions;
//import org.elasticsearch.client.RestClient;
//import org.elasticsearch.client.RestHighLevelClient;
//import java.io.IOException;
//import java.util.HashMap;
//import java.util.Map;
//
//public class InsertIntoElasticsearch {
//	public static String latestTimestamp(String neededLog) {
//        String latestTimestamp = "0"; 
//        Test test = new Test();
//        Object[] result = test.getArray(neededLog);
//        for (Object obj : result) {
//            if (obj instanceof HashMap) {
//                HashMap<String, String> event = (HashMap<String, String>) obj;
//                for (String key : event.keySet()) {
//                    if (key.equals("Time Generated")) {
//                        String timestamp = event.get(key);
//                        if (timestamp.compareTo(latestTimestamp) > 0) {
//                            latestTimestamp = timestamp;
//                        }
//                    }
//                }
//            }
//        }
//        return latestTimestamp;
//    }
//	
//    public static void insertion(String neededLog) throws IOException {
//        RestHighLevelClient client = new RestHighLevelClient(
//                RestClient.builder(new HttpHost("localhost", 9200, "http")));
//
//        String indexName = "collectedlogs";
//        int c=0;
//        Test test = new Test();
//        Object[] result = test.getArray(neededLog);
//        
//        try {
//            BulkRequest bulkRequest = new BulkRequest();
//            for (Object obj : result) {
//                Map<String, String> event = new HashMap<>();
//
//                if (obj instanceof HashMap) {
//                    HashMap<String, String> eventData = (HashMap<String, String>) obj;
//                    for (String key : eventData.keySet()) {
//                        event.put(key, eventData.get(key));
//                    }
//                    c++;
//                } else {
//                    System.out.println("Error");
//                }
//
//                IndexRequest request = new IndexRequest(indexName).source(event);
//                bulkRequest.add(request);
//            }
//
//            BulkResponse bulkResponse = client.bulk(bulkRequest, RequestOptions.DEFAULT);
//
//            if (bulkResponse.hasFailures()) {
//                System.err.println("Error indexing documents: " + bulkResponse.buildFailureMessage());
//            } else {
//                System.out.println("Documents indexed successfully.");
//            }
//        } catch (IOException e) {
//            System.err.println("Error indexing documents "+c );
//        } finally {
//            client.close();
//        }
//    }
//    
//    
//    
//    public static void insertionFrom(String neededLog, String latestTimestamp) throws IOException {
//        RestHighLevelClient client = new RestHighLevelClient(
//                RestClient.builder(new HttpHost("localhost", 9200, "http")));
//
//        String indexName = "collectedlogs";
//
//        Test test = new Test();
//        Object[] result = test.getArray(neededLog);
//
//        try {
//            BulkRequest bulkRequest = new BulkRequest();
//            for (Object obj : result) {
//                Map<String, String> event = new HashMap<>();
//
//                if (obj instanceof HashMap) {
//                    HashMap<String, String> eventData = (HashMap<String, String>) obj;
//                    for (String key : eventData.keySet()) {
//                        event.put(key, eventData.get(key));
//                    }
//                } else {
//                    System.out.println("Error");
//                }
//
//                String eventTimestamp = event.get("Time Generated");
//                if (eventTimestamp != null && eventTimestamp.compareTo(latestTimestamp) > 0) {
//                    IndexRequest request = new IndexRequest(indexName).source(event);
//                    bulkRequest.add(request);
//                }
//            }
//
//            BulkResponse bulkResponse = client.bulk(bulkRequest, RequestOptions.DEFAULT);
//
//            if (bulkResponse.hasFailures()) {
//                System.err.println("Error indexing documents: " + bulkResponse.buildFailureMessage());
//            } else {
//                System.out.println("Documents indexed successfully.");
//            }
//        } catch (IOException e) {
//            System.err.println("Error indexing documents");
//        } finally {
//            client.close();
//        }
//    }
//
//}

package com.servlets;

import org.example.InsertIntoElasticsearch;

import java.io.*;
import java.sql.*;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONObject;

@WebServlet("/logFetcher")
public class logFetcher extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private static final String DB_URL = "jdbc:postgresql://localhost:5432/LogCollection";
    private static final String DB_USERNAME = "postgres";
    private static final String DB_PASSWORD = "Kala@1001";

    protected void doOptions(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setHeader("Access-Control-Allow-Origin", "http://localhost:4200");
        response.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
        response.setHeader("Access-Control-Allow-Headers", "Content-Type");
        response.setHeader("Access-Control-Allow-Credentials", "true");
        response.setStatus(HttpServletResponse.SC_OK);
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html");

        PrintWriter out = response.getWriter();
        out.println("<html><body>");

        try {
            Class.forName("org.postgresql.Driver");
            Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD);
            out.println("<h3>Connected to PostgreSQL</h3>");
            Statement st = connection.createStatement();
            String sql = "select * from logfetch";
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                out.println(rs.getInt("id"));
                out.println(rs.getString("logtype"));
                out.println(rs.getString("updatedtime"));
            }
            connection.close();
        } catch (SQLException e) {
            out.println("<h3>Error in connecting to PostgreSQL</h3>");
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }

        out.println("</body></html>");
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("application/json");
        response.setHeader("Access-Control-Allow-Origin", "http://localhost:4200");
        response.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
        response.setHeader("Access-Control-Allow-Headers", "Content-Type");
        response.setHeader("Access-Control-Allow-Credentials", "true");

        PrintWriter out = response.getWriter();

        try {
            BufferedReader reader = request.getReader();
            StringBuilder jsonPayload = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                jsonPayload.append(line);
            }

            JSONObject jsonObject = new JSONObject(jsonPayload.toString());
            String logType = jsonObject.getString("logtype");

            String updatedTime = "timwmo";

            Class.forName("org.postgresql.Driver");
            try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {

                if (logType != null && !logType.isEmpty()) {
                    String sql = "SELECT * FROM logfetch WHERE logtype = ?";
                    try (PreparedStatement statement = connection.prepareStatement(sql)) {
                        statement.setString(1, logType);
                        ResultSet rs = statement.executeQuery();
                        if (rs.next()) {
                            String ut = rs.getString("updatedtime");
                            InsertIntoElasticsearch.insertionFrom(logType, ut);
                            String lt = InsertIntoElasticsearch.latestTimestamp(logType);
                            String sql1 = "UPDATE logfetch SET updatedtime = ? WHERE logtype = ?";
                            try (PreparedStatement updateStatement = connection.prepareStatement(sql1)) {
                                updateStatement.setString(1, lt);
                                updateStatement.setString(2, logType);
                                updateStatement.executeUpdate();
                            }
                        } else {
                            InsertIntoElasticsearch.insertion(logType);
                            String lt = InsertIntoElasticsearch.latestTimestamp(logType);
                            String sql1 = "UPDATE logfetch SET updatedtime = ? WHERE logtype = ?";
                            try (PreparedStatement updateStatement = connection.prepareStatement(sql1)) {
                                updateStatement.setString(1, lt);
                                updateStatement.setString(2, logType);
                                updateStatement.executeUpdate();
                            }
                        }
                    }
                } else {
                    out.println("<p>No log type specified.</p>");
                }

            }
        } catch (Exception e) {
            JSONObject jsonResponse = new JSONObject();
            jsonResponse.put("status", "error");
            jsonResponse.put("message", e.getMessage());
            out.println(jsonResponse.toString());
            e.printStackTrace();
        }
    }
}

